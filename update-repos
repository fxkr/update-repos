#!/usr/bin/env python2

"""
update-repos
------------

A small script that updates all repositories
in a given directory to the newest version.
"""

__version__ = "0.1.3"


import argparse
import os
import subprocess
import sys


class Repo(object):

    def __init__(self, path, dry, log):
        self._path = path
        self._dry = dry
        self._log = log

    @property
    def path(self):
        return self._path

    def run(self, *cmds):
        for cmd in cmds:
            return_code = self.run_single(cmd)
            if return_code not in (0, None):
                self._log.command_failed(return_code)
                break

    def run_single(self, cmd):
        self._log.command(" ".join(cmd))
        if not self._dry:
            proc = subprocess.Popen(
                args=cmd,
                stdout=self._log.get_stream(),
                stderr=self._log.get_stream(),
                cwd=self._path)
            proc.wait()
            self._log.get_stream().flush()
            return proc.returncode

    def has_subdir(self, *subdir_parts):
        return os.path.isdir(os.path.join(self._path, *subdir_parts))

    def has_files(self, expected_files):
        return sorted(os.listdir(self.path))\
            == sorted(expected_files)


class SupportBase(object):

    @classmethod
    def select(cls, repo_path):
        return [
            inst for inst in [
                subcls() for subcls in cls.__subclasses__()]
            if inst.matches(repo_path)]

    @classmethod
    def get_names(cls):
        return set(c.name for c in cls.__subclasses__())


class GitSupport(SupportBase):
    name = "git"

    def matches(self, repo):
        return repo.has_subdir(".git")\
            and not repo.has_subdir(".git", "svn")

    def update(self, repo):
        repo.run(
            ["git", "fetch"],
            ["git", "rebase"])


class GitSvnSupport(SupportBase):
    name = "git-svn"

    def matches(self, repo):
        return repo.has_subdir(".git")\
            and repo.has_subdir(".git", "svn")

    def update(self, repo):
        repo.run(
            ["git", "svn", "fetch"],
            ["git", "svn", "rebase"])


class BareGitSupport(SupportBase):
    name = "git-bare"

    def matches(self, repo):
        return repo.has_files([
            'HEAD', 'branches', 'config', 'description',
            'hooks', 'info', 'objects', 'refs'])

    def update(self, repo):
        repo.run(["git", "fetch"])


class SvnSupport(SupportBase):
    name = "svn"

    def matches(self, repo):
        return repo.has_subdir(".svn")

    def update(self, repo):
        repo.run(["svn", "update"])


class BzrSupport(SupportBase):
    name = "bzr"

    def matches(self, repo):
        return repo.has_subdir(".bzr")

    def update(self, repo):
        repo.run(["bzr", "update"])


class HgSupport(SupportBase):
    name = "hg"

    def matches(self, repo):
        return repo.has_subdir(".hg")

    def update(self, repo):
        repo.run(
            ["hg", "pull"],
            ["hg", "update"])


class Log(object):
    DEFAULT_FMT = "%s"
    RESET_FMT = "%s\x1b[0m"
    BLUE_FMT = RESET_FMT % "\x1b[1;34m%s"
    RED_FMT = RESET_FMT % "\x1b[1;31m%s"
    GREEN_FMT = RESET_FMT % "\x1b[1;32m%s"
    YELLOW_FMT = RESET_FMT % "\x1b[1;33m%s"
    GRAY_FMT = RESET_FMT % "\x1b[0;37m%s"

    def repo_ok(self, repo, repo_type):
        print self.GREEN_FMT % ("%s: %s" % (repo.path, repo_type.name))

    def repo_unsupported(self, repo):
        print self.RED_FMT % ("%s: unsupported" % (repo.path))

    def repo_ambiguous(self, repo, repo_types):
        print self.RED_FMT % ("%s: ambiguous: %s" % (
            repo.path, ", ".join(t.name for t in repo_types)))

    def repo_skipped(self, repo, repo_types):
        print self.GRAY_FMT % ("%s: skipped: %s" % (
            repo.path, ", ".join(t.name for t in repo_types)))

    def command(self, cmd):
        print "> " + self.YELLOW_FMT % cmd

    def command_failed(self, exit_code):
        print self.RED_FMT % "returned with exit code %i" % exit_code

    def interrupted(self):
        print self.YELLOW_FMT % "interrupted!"

    def get_stream(self):
        return sys.stdout


def run(paths, is_repo, dry_run, vcs_names, log):

    if not is_repo: # but contains repos
        paths = [os.path.join(base_dir, sub_dir)
            for base_dir in paths
            for sub_dir in os.listdir(base_dir)
            if not sub_dir.startswith(".")
            and os.path.isdir(os.path.join(base_dir, sub_dir))]

    for repo_path in paths:
        repo = Repo(repo_path, dry_run, log)
        classes = SupportBase.select(repo)
        if len(classes) < 1:
            log.repo_unsupported(repo)
        elif len(classes) > 1:
            log.repo_ambiguous(repo, classes)
        elif classes[0].name not in vcs_names:
            log.repo_skipped(repo, classes)
        else:
            log.repo_ok(repo, classes[0])
            try:
                classes[0].update(repo)
            except KeyboardInterrupt, e:
                log.interrupted()


def main(args):
    par = argparse.ArgumentParser(
        description='Update repositories in a directory.',
        epilog="Supported repository types: " + ", ".join(SupportBase.get_names()))
    par.add_argument('-V', '--version', action='version', version=__version__)
    par.add_argument('paths', metavar='DIRECTORY', type=directory_argtype, nargs='+',
        help='one or more directories to scan for repositories')
    par.add_argument('--dry-run', action="store_true", default=False,
        help="don't actually run any commands")
    par.add_argument('-t', '--type', dest="types", action="store",
        metavar="x,y", default="all", type=vcs_list_argtype,
        help="types of repositories to update (default: all)")
    par.add_argument('-r', '--repo', dest="is_repo", action="store_true",
        help="the directories don't contain repos, they are repos")
    args = par.parse_args()
    run(args.paths, args.is_repo, args.dry_run, args.types, Log())

def directory_argtype(value):
    if not os.path.isdir(value):
        raise argparse.ArgumentTypeError("not a directory: %s" % value)
    return value

def vcs_list_argtype(value):
    if value == "all":
        return SupportBase.get_names()
    result = [] # can't use yield because we have to fail early
    for name in value.split(","):
        if name not in SupportBase.get_names():
            raise argparse.ArgumentTypeError("unsupported VCS: %s" % name)
        result.append(name)
    return result

if __name__ == '__main__':
    main(sys.argv[1:])

